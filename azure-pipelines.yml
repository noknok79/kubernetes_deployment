# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:

- task: CopyFiles@2
  inputs:
    SourceFolder: 'sample_deployment'
    Contents: '**'
    TargetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'win365ent-tennant'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: 'az login --service-principal -t cab4c3be-84af-48f5-960f-7415daff3a80 -u 1b88e6b9-1666-4eb0-9502-3b0bd6988557 -p LiQ8Q~~uCK4CtzCcH7Kww3BrD6LP48ap2FdrqcXP'

- task: TerraformInstallation@1
  inputs:
    terraformVersion: 'latest'

- task: TerraformInit@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'win365ent-tennant'
    backendAzureRmResourceGroupName: 'terraform-aks-storage-rg'
    backendAzureRmStorageAccountName: 'terratfstatestrg2'
    backendAzureRmContainerName: 'tfstatefiles'
    backendAzureRmKey: 'uat.terraform.tfstate'

- task: TerraformPlan@3
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/sample_deployment/'
    environmentServiceNameAzureRM: 'win365ent-tennant'

- task: TerraformApply@4
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/sample_deployment/'
    environmentServiceNameAzureRM: 'win365ent-tennant'